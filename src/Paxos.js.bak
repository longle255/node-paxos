import AcceptorNode from './AcceptorNode';
import ProposerNode from './ProposerNode';
import LearnerNode from './LearnerNode';
import ClientNode from './ClientNode';
import Logger from './Logger';
import Utils from './Utils';
import SystemConfig from './Config';
import _ from 'lodash';

export default opt => {
  let logger = Logger.getLogger(module);
  let multiStart = true;
  let id = -1;
  if (opt.id) {
    id = opt.id;
    multiStart = false;
  }
  switch (opt.role) {
    case 'acceptors':
      let acceptors = [];
      let aMul = SystemConfig.getMulticastGroup('acceptors');
      let aIndex = 0;
      if (multiStart) {
        _.each(SystemConfig.getGroup('acceptors'), acceptor => {
          let options = _.assign(acceptor, {
            multicast: aMul,
            id: 'a-' + aIndex++
          });
          let a = new AcceptorNode(options);
          acceptors.push(a.start());
        });
      } else {
        console.log(`Starting node acceptor ${id} - ${JSON.stringify(SystemConfig.getNode('acceptors', id))}`);
        _.each(SystemConfig.getNodeByGroup('acceptors', id), acceptor => {
          let options = _.assign(acceptor, {
            multicast: aMul,
            id: 'a-' + aIndex++
          });
          let a = new AcceptorNode(options);
          acceptors.push(a.start());
        });
      }
      Promise.all(acceptors).then(() => {
        logger.info('All acceptor started');
      });
      break;
    case 'learners':
      let learners = [];
      let lMul = SystemConfig.getMulticastGroup('learners');
      let lIndex = 0;
      if (multiStart) {
        _.each(SystemConfig.getGroup('learners'), learner => {
          let options = _.assign(learner, {
            multicast: lMul,
            quorum: SystemConfig.getAcceptorQuorum(),
            calRate: true,
            id: 'l-' + lIndex++
          });
          let l = new LearnerNode(options);
          learners.push(l.start());
        });
      } else {
        console.log(`Starting node learner ${id} - ${JSON.stringify(SystemConfig.getNode('learners', id))}`);
        _.each(SystemConfig.getNodeByGroup('learners', id), learner => {
          let options = _.assign(learner, {
            multicast: lMul,
            quorum: SystemConfig.getAcceptorQuorum(),
            calRate: true,
            id: 'l-' + id
          });
          let l = new LearnerNode(options);
          learners.push(l.start());
        });
      }
      Promise.all(learners).then(() => {
        logger.info('All learner started');
      });
      break;
    case 'proposers':
      let proposers = [];
      let pMul = SystemConfig.getMulticastGroup('proposers');
      let pIndex = 0;
      if (multiStart) {
        _.each(SystemConfig.getGroup('proposers'), proposer => {
          let options = _.assign(proposer, {
            multicast: pMul,
            quorum: SystemConfig.getAcceptorQuorum(),
            id: 'p-' + pIndex++
          });
          let c = new ProposerNode(options);
          proposers.push(c.start());
        });
      } else {
        console.log(`Starting node proposer ${id} - ${JSON.stringify(SystemConfig.getNode('proposers', id))}`);
        let options = _.assign(SystemConfig.getNodeByGroup('proposers', id), {
          multicast: pMul,
          quorum: SystemConfig.getAcceptorQuorum(),
          id: 'p-' + id
        });
        let c = new ProposerNode(options);
        proposers.push(c.start());
      }
      Promise.all(proposers).then(() => {
        logger.info('All coordinator started');
      });
      break;
    case 'clients':
      let clientsStarting = [];
      let clients = [];
      let cMul = SystemConfig.getMulticastGroup('clients');
      let cIndex = 0;
      if (multiStart) {
        _.each(SystemConfig.getGroup('clients'), client => {
          let options = _.assign(client, {
            multicast: cMul,
            id: 'c-' + cIndex++
          });
          let c = new ClientNode(options);
          clients.push(c);
          clientsStarting.push(c.start());
        });
      } else {
        console.log(`Starting node client ${id} - ${JSON.stringify(SystemConfig.getNode('clients', id))}`);
        _.each(SystemConfig.getNodeByGroup('clients', id), client => {
          let options = _.assign(client, {
            multicast: cMul,
            id: 'c-' + id
          });
          let c = new ClientNode(options);
          clients.push(c);
          clientsStarting.push(c.start());
        });
      }
      Promise.all(clientsStarting).then(() => {
        logger.info('All client started started');
        _.each(clients, client => {
          setInterval(() => {
            let x = Utils.randomString(8);
            client.request(x);
          }, 0);
        });
      });
      break;
    default:
      break;
  }
};
